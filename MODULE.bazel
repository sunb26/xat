bazel_dep(name = "aspect_bazel_lib", version = "2.5.3")
bazel_dep(name = "aspect_rules_js", version = "1.38.0")
bazel_dep(name = "aspect_rules_py", version = "0.7.1")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "gazelle", version = "0.35.0")
bazel_dep(name = "rules_go", version = "0.46.0")
bazel_dep(name = "rules_nodejs", version = "6.0.5")
bazel_dep(name = "rules_oci", version = "1.7.4")
bazel_dep(name = "rules_pkg", version = "0.10.1")
bazel_dep(name = "rules_python", version = "0.31.0")
bazel_dep(name = "toolchains_llvm", version = "0.10.3")

LLVM_VERSION = "16.0.4"
GO_VERSION = "1.22.1"
PYTHON_VERSION = "3.11.7"

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
  name = "org_chromium_sysroot_linux_x64",
  integrity = "sha256-G+YOfEVqvFkKYTxk+rTqx2MsgexvInNKYbU2aaRAc0Y=",
  urls = ["https://commondatastorage.googleapis.com/chrome-linux-sysroot/toolchain/2028cdaf24259d23adcff95393b8cc4f0eef714b/debian_bullseye_amd64_sysroot.tar.xz"],
  build_file_content = """filegroup(name = "sysroot", srcs = glob(["*/**"]), visibility = ["//visibility:public"])""",
)

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(llvm_version = LLVM_VERSION)
use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")
llvm.toolchain(
  name = "llvm_toolchain_with_sysroot",
  llvm_version = LLVM_VERSION,
  # https://github.com/bazel-contrib/toolchains_llvm/issues/234
  # aspect query --consistent_labels @org_chromium_sysroot_linux_x64//:sysroot
  sysroot = {"linux-x86_64": "@@_main~_repo_rules~org_chromium_sysroot_linux_x64//:sysroot"},
  toolchain_roots = {"": "@@toolchains_llvm~~llvm~llvm_toolchain_llvm//"},
)
use_repo(llvm, "llvm_toolchain_with_sysroot")
register_toolchains("@llvm_toolchain//:all")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = GO_VERSION)
go_sdk.download(version = GO_VERSION, goarch = "amd64", goos = "linux")
go_sdk.nogo(nogo = "//:nogo")

NODE_VERSION = "20.10.0"
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
use_repo(node, "nodejs_toolchains")
node.toolchain(node_version = NODE_VERSION)
pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm", dev_dependency = True)
use_repo(pnpm, "pnpm")
npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
  name = "npm",
  npmrc = "//:.npmrc",
  pnpm_lock = "//:pnpm-lock.yaml",
  quiet = False,
  update_pnpm_lock = True,
  verify_node_modules_ignored = "//:.bazelignore",
  data = [
    "//:package.json",
    "//:pnpm-lock.yaml",
    "//:pnpm-workspace.yaml",
    "//:web/package.json",
  ],
)
use_repo(npm, "npm")

python = use_extension("@rules_python//python/extensions:python.bzl", "python", dev_dependency = True)
python.toolchain(python_version = PYTHON_VERSION, configure_coverage_tool = True)
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
  hub_name = "pip",
  python_version = PYTHON_VERSION,
  requirements_lock = "//:requirements.txt",
  # NOTE: see hack in requirements.txt at pymupdf line
  extra_pip_args = ["--only-binary", "pymupdf"],
)
use_repo(pip, "pip")
