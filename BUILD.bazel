load("@aspect_bazel_lib//lib:copy_file.bzl", "copy_file")
load("@aspect_bazel_lib//lib:run_binary.bzl", "run_binary")
load("@aspect_rules_py//py:defs.bzl", "py_binary")
load("@gazelle//:def.bzl", "gazelle")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@pip_macos_arm64//:requirements.bzl", requirement_macos_arm64 = "requirement")
load("@pip_linux_x86_64//:requirements.bzl", requirement_linux_x86_64 = "requirement")
load("@rules_go//go:def.bzl", "TOOLS_NOGO", "go_binary", "go_library", "nogo")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@rules_python//python/pip_install:requirements.bzl", "compile_pip_requirements")
load("@rules_rust//rust:defs.bzl", "rust_binary")

npm_link_all_packages(name = "node_modules")

compile_pip_requirements(
    name = "requirements",
    requirements_in = "//:requirements.in",
    requirements_txt = "//:requirements.txt",
)

nogo(
    name = "nogo",
    visibility = ["//visibility:public"],
    deps = TOOLS_NOGO,
)

alias(
    name = "absl_py",
    actual = select({
        ":linux_x86_64": requirement_linux_x86_64("absl-py"),
        ":macos_arm64": requirement_macos_arm64("absl-py"),
        "//conditions:default": "@platforms//:incompatible",
    }),
)

py_binary(
    name = "gunzip",
    srcs = ["gunzip.py"],
    deps = [":absl_py"],
)

py_binary(
    name = "lzma",
    srcs = ["lzma.py"],
    deps = [":absl_py"],
)

alias(
    name = "hivemind_x86_64",
    actual = select({
        ":linux_x86_64": "@hivemind_linux_x86_64//file",
        ":macos_arm64": "@hivemind_macos_arm64//file",
        "//conditions:default": "@platforms//:incompatible",
    }),
)

run_binary(
    name = "hivemind_extract",
    tool = ":gunzip",
    args = ["--input", "$(execpath :hivemind_x86_64)", "--output", "$@"],
    srcs = [":hivemind_x86_64"],
    outs = ["hivemind_extract"],
)

copy_file(
    name = "hivemind",
    src = ":hivemind_extract",
    out = "hivemind",
    is_executable = True,
    visibility = ["//cmd/serve:__pkg__"],
)

pkg_tar(
    name = "hivemind_tar",
    srcs = [":hivemind"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libgomp_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libgomp_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libgomp_x86_64//:data.tar.xz"],
    outs = ["libgomp.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libgl_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libgl_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libgl_x86_64//:data.tar.xz"],
    outs = ["libgl.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libglib_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libglib_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libglib_x86_64//:data.tar.xz"],
    outs = ["libglib.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libglvnd_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libglvnd_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libglvnd_x86_64//:data.tar.xz"],
    outs = ["libglvnd.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libglx_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libglx_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libglx_x86_64//:data.tar.xz"],
    outs = ["libglx.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libx11_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libx11_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libx11_x86_64//:data.tar.xz"],
    outs = ["libx11.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libxcb_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libxcb_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libxcb_x86_64//:data.tar.xz"],
    outs = ["libxcb.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libxau_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libxau_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libxau_x86_64//:data.tar.xz"],
    outs = ["libxau.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libxdmcp_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libxdmcp_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libxdmcp_x86_64//:data.tar.xz"],
    outs = ["libxdmcp.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

run_binary(
    name = "libbsd_tar",
    tool = ":lzma",
    args = ["--input", "$(execpath @libbsd_x86_64//:data.tar.xz)", "--output", "$@"],
    srcs = ["@libbsd_x86_64//:data.tar.xz"],
    outs = ["libbsd.tar"],
    visibility = ["//cmd/serve:__pkg__"],
)

config_setting(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    visibility = [
        "//cmd/serve:__pkg__",
        "//paddle_ocr:__pkg__",
    ],
)

config_setting(
    name = "macos_arm64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:arm64",
    ],
    visibility = [
        "//cmd/serve:__pkg__",
        "//paddle_ocr:__pkg__",
    ],
)

# gazelle:prefix github.com/sunb26/xat

# https://github.com/bazelbuild/rules_go/blob/master/docs/go/core/bzlmod.md#generating-build-files
gazelle(name = "gazelle")

go_library(
    name = "xat_go_lib",
    srcs = ["main.go"],
    importpath = "github.com/sunb26/xat",
    visibility = ["//visibility:private"],
)

go_binary(
    name = "xat_go",
    embed = [":xat_go_lib"],
    visibility = ["//visibility:public"],
)

rust_binary(
    name = "xat_rust",
    srcs = ["main.rs"],
)

py_binary(
    name = "xat_py",
    srcs = ["main.py"],
    main = "main.py",
)

exports_files([".rustfmt.toml"])
